// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  app.AppController = (function() {
    function AppController() {
      document.dispatchEvent(new CustomEvent('app:starting'));
      app.prompt = "Did you need to be in New York City today?";
      app.views = {
        prompt: new app.PromptView(document.getElementById('prompt')),
        scroller: new app.ScrollView(document.getElementById('list')),
        input: new app.InputView(document.getElementById('input')),
        stats: new app.StatsView(document.getElementById('stats')),
        history: new app.HistoryView(document.getElementById('history'))
      };
      app.entries = new app.EntriesCollection();
      this.listen();
      document.dispatchEvent(new CustomEvent('app:loaded'));
    }

    AppController.prototype.listen = function() {
      return document.addEventListener('entry:create', function(e) {
        return app.entries.add(new app.Entry({
          answer: e.detail.answer
        }));
      });
    };

    return AppController;

  })();

  document.addEventListener('DOMContentLoaded', function() {
    return app.controller = new app.AppController;
  });

  app.EntriesCollection = (function() {
    function EntriesCollection() {
      this.restore();
    }

    EntriesCollection.prototype.restore = function() {
      this.records = [];
      if (localStorage["dailyq:entries"] != null) {
        this.records = JSON.parse(localStorage["dailyq:entries"]).map(function(entry) {
          return new app.Entry(entry);
        });
      }
      this.broadcastChange();
      return this.records;
    };

    EntriesCollection.prototype.save = function() {
      localStorage["dailyq:entries"] = JSON.stringify(this.records);
      this.broadcastChange();
      return this.records;
    };

    EntriesCollection.prototype.add = function(entry) {
      this.records.push(entry);
      return this.save();
    };

    EntriesCollection.prototype.getRecords = function() {
      return this.records;
    };

    EntriesCollection.prototype.reset = function() {
      if (confirm('Are you sure you want to permanently delete all entries?')) {
        this.records = [];
        return this.save();
      } else {

      }
    };

    EntriesCollection.prototype.seed = function() {
      var i, _results;
      i = 0;
      _results = [];
      while (i < 20) {
        this.add(new app.Entry({
          answer: i % 2
        }));
        _results.push(i += 1);
      }
      return _results;
    };

    EntriesCollection.prototype.broadcastChange = function() {
      return document.dispatchEvent(new CustomEvent('entries:changed', {
        detail: {
          entries: this.getRecords()
        }
      }));
    };

    return EntriesCollection;

  })();

  document.addEventListener('app:started', function(e) {});

  app.Entry = (function() {
    function Entry(args) {
      args || (args = {});
      args.date || (args.date = Date.now());
      if (!(args.answer === 1 || args.answer === 0)) {
        throw "Can't create entry without answer";
      }
      this.setDate(args.date);
      this.setAnswer(args.answer);
    }

    Entry.prototype.getDate = function() {
      return this.date;
    };

    Entry.prototype.setDate = function(date) {
      return this.date = date;
    };

    Entry.prototype.getAnswer = function() {
      return this.answer;
    };

    Entry.prototype.setAnswer = function(answer) {
      return this.answer = answer;
    };

    Entry.prototype.getAttributes = function() {
      return {
        date: this.getDate(),
        answer: this.getAnswer()
      };
    };

    return Entry;

  })();

  Node.prototype.prependChild = function(el) {
    return this.childNodes[0] && this.insertBefore(el, this.childNodes[0]) || this.appendChild(el);
  };

  app.View = (function() {
    function View(el) {
      if (el == null) {
        throw "Cannot construct view without an HTML element";
      }
      this.el = el;
      this.initialize();
      this.render();
      this.events();
    }

    View.prototype.initialize = function() {};

    View.prototype.render = function() {};

    View.prototype.events = function() {};

    return View;

  })();

  app.PromptView = (function(_super) {
    __extends(PromptView, _super);

    function PromptView() {
      return PromptView.__super__.constructor.apply(this, arguments);
    }

    PromptView.prototype.events = function() {
      return this.el.addEventListener('touchmove', function(e) {
        return e.preventDefault();
      });
    };

    PromptView.prototype.render = function() {
      return this.el.innerHTML = "<h1>" + app.prompt + "</h1>";
    };

    return PromptView;

  })(app.View);

  app.InputView = (function(_super) {
    __extends(InputView, _super);

    function InputView() {
      return InputView.__super__.constructor.apply(this, arguments);
    }

    InputView.prototype.events = function() {
      document.addEventListener('entry:create', this);
      this.el.addEventListener(app.CLICK_EVENT, this);
      return this.el.addEventListener('touchmove', function(e) {
        return e.preventDefault();
      });
    };

    InputView.prototype.handleEvent = function(e) {
      if (e.type === app.CLICK_EVENT) {
        this.newEntry(e);
      }
      if (e.type === 'entry:create') {
        return this.hide(e);
      }
    };

    InputView.prototype.newEntry = function(e) {
      var target, val;
      target = e.target;
      val = target.getAttribute('data-val');
      if (val != null) {
        return document.dispatchEvent(new CustomEvent('entry:create', {
          detail: {
            answer: parseInt(val)
          }
        }));
      }
    };

    InputView.prototype.hide = function() {
      return this.el.style.display = 'none';
    };

    InputView.prototype.render = function() {
      return this.el.innerHTML = "<div data-val=1 class='button button-yes'>Yes</div> <div data-val=0 class='button button-no'>No</div>";
    };

    return InputView;

  })(app.View);

  app.ScrollView = (function(_super) {
    __extends(ScrollView, _super);

    function ScrollView() {
      return ScrollView.__super__.constructor.apply(this, arguments);
    }

    ScrollView.prototype.events = function() {
      return this.el.addEventListener('touchstart', this);
    };

    ScrollView.prototype.handleEvent = function(e) {
      if (e.type === 'touchstart') {
        return this.onTouchStart(e);
      }
    };

    ScrollView.prototype.onTouchStart = function(e) {
      var atBottom, atTop, height;
      height = this.el.getBoundingClientRect().height;
      atTop = this.el.scrollTop === 0;
      atBottom = this.el.scrollHeight = -this.el.scrollTop === height;
      if (atTop) {
        this.el.scrollTop += 1;
      }
      if (atBottom) {
        return this.el.scrollTop -= 1;
      }
    };

    return ScrollView;

  })(app.View);

  app.HistoryView = (function(_super) {
    __extends(HistoryView, _super);

    function HistoryView() {
      return HistoryView.__super__.constructor.apply(this, arguments);
    }

    HistoryView.prototype.initialize = function() {
      return this.months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    };

    HistoryView.prototype.events = function() {
      return document.addEventListener('entries:changed', this);
    };

    HistoryView.prototype.handleEvent = function(e) {
      if (e.type === 'entries:changed') {
        return this.onEntryChange(e);
      }
    };

    HistoryView.prototype.onEntryChange = function(event) {
      this.entries = event.detail.entries;
      return this.render();
    };

    HistoryView.prototype.render = function() {
      var entry, _i, _len, _ref, _results;
      this.el.innerHTML = '';
      if (this.entries != null) {
        _ref = this.entries;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          entry = _ref[_i];
          _results.push(this.renderEntry(entry));
        }
        return _results;
      }
    };

    HistoryView.prototype.renderEntry = function(entry) {
      var date, elem;
      date = new Date(entry.date);
      elem = document.createElement('div');
      elem.className = "entry entry-" + entry.answer;
      elem.id = "entry_" + entry.date;
      elem.innerHTML = "<div class='entry_date'> " + this.months[date.getMonth()] + " " + (date.getDate()) + " </div> <div class='entry_answer'></div>";
      return this.el.prependChild(elem);
    };

    return HistoryView;

  })(app.View);

  app.StatsView = (function() {
    function StatsView(el) {
      if (el == null) {
        throw "Cannot construct view without an HTML element";
      }
      this.el = el;
      this.events();
    }

    StatsView.prototype.events = function() {
      document.addEventListener('entry:create', this);
      return document.addEventListener('entries:changed', this);
    };

    StatsView.prototype.handleEvent = function(e) {
      if (e.type === 'entry:create') {
        this.show();
      }
      if (e.type === 'entries:changed') {
        return this.render(e);
      }
    };

    StatsView.prototype.show = function() {
      return this.el.style.display = 'block';
    };

    StatsView.prototype.render = function(e) {
      this.entries = e.detail.entries;
      return this.el.innerHTML = this.entries.length;
    };

    return StatsView;

  })();

}).call(this);
